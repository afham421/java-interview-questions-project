🧠 Shallow Copy vs Deep Copy in Java
Both Shallow Copy and Deep Copy are ways to duplicate objects, but they behave differently when it comes to copying nested objects (like objects inside objects).

📌 1. Shallow Copy
Copies only references of inner objects, not the actual nested objects.

The original and copied objects share nested objects.


class Address {
    String city;
    public Address(String city) {
        this.city = city;
    }
}

class Person implements Cloneable {
    String name;
    Address address;

    public Person(String name, Address address) {
        this.name = name;
        this.address = address;
    }

    @Override
    protected Person clone() throws CloneNotSupportedException {
        return (Person) super.clone(); // shallow copy
    }
}
🔍 Usage:

Person p1 = new Person("Ali", new Address("Islamabad"));
Person p2 = p1.clone();

p2.name = "Zain";
p2.address.city = "Lahore";

System.out.println(p1.name);         // Ali ✅
System.out.println(p1.address.city); // Lahore ❌ (changed because of shared reference)
🛑 Problem: p1.address and p2.address point to the same object.

📌 2. Deep Copy
Copies the object and recursively copies all nested objects.

The original and copy are fully independent.


class Person implements Cloneable {
    String name;
    Address address;

    public Person(String name, Address address) {
        this.name = name;
        this.address = address;
    }

    @Override
    protected Person clone() throws CloneNotSupportedException {
        // Deep copy
        return new Person(this.name, new Address(this.address.city));
    }
}
🔍 Usage:

Person p1 = new Person("Ali", new Address("Islamabad"));
Person p2 = p1.clone();

p2.name = "Zain";
p2.address.city = "Lahore";

System.out.println(p1.name);         // Ali
System.out.println(p1.address.city); // Islamabad ✅ (unchanged)
🧾 Summary Table
| Feature        | Shallow Copy            | Deep Copy                  |
| -------------- | ----------------------- | -------------------------- |
| Nested objects | Shared (same reference) | Duplicated (new instances) |
| Performance    | Faster                  | Slower (recursive copying) |
| Independence   | Not fully independent   | Fully independent          |
| Use case       | Simple objects          | Complex object graphs      |


✅ Java Tools That Support Copying
| Tool             | Type                 | Notes                                        |
| ---------------- | -------------------- | -------------------------------------------- |
| `Object.clone()` | Shallow (by default) | Must implement `Cloneable`                   |
| Copy Constructor | Deep or Shallow      | Manual control                               |
| Serialization    | Deep                 | Using `ObjectInputStream/ObjectOutputStream` |


🔥 Quick Trick to Do Deep Copy (Serializable Way)

ByteArrayOutputStream baos = new ByteArrayOutputStream();
ObjectOutputStream oos = new ObjectOutputStream(baos);
oos.writeObject(original);

ByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());
ObjectInputStream ois = new ObjectInputStream(bais);
Object copied = ois.readObject(); // deep copy