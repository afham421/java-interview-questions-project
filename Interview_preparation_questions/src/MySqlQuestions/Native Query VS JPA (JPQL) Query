üí° What is JPA?
JPA (Java Persistence API) is a Java specification used to map Java objects (entities) to database tables.
It lets you interact with the database using Java objects, without writing raw SQL.

You usually use it with frameworks like Hibernate or Spring Data JPA.

‚úÖ Example (JPA Query / JPQL):

@Query("SELECT u FROM User u WHERE u.age > :age")
List<User> findUsersOlderThan(@Param("age") int age);
This is JPQL (Java Persistence Query Language), which looks like SQL but works with Java classes, not database tables.

‚öôÔ∏è What is a Native Query?
A native query is a raw SQL query written directly for your database.
It gives you full control and can use all database-specific features (e.g., joins, indexes, functions).

‚úÖ Example (Native Query):

@Query(value = "SELECT * FROM users WHERE age > :age", nativeQuery = true)
List<User> findUsersNative(@Param("age") int age);
This is raw SQL, just like you would write in MySQL, PostgreSQL, etc.

üîç Key Differences
| Feature     | JPA (JPQL) Query               | Native Query                     |
| ----------- | ------------------------------ | -------------------------------- |
| Language    | JPQL (Java-based SQL)          | SQL (raw DB syntax)              |
| Works with  | Java classes (entities)        | DB tables/columns                |
| Portability | More portable (DB independent) | Less portable (DB-specific)      |
| Performance | Slower for large data          | Faster and more flexible         |
| Use cases   | Standard CRUD                  | Complex joins, huge data, tuning |


üéØ When to Use Which?
| Situation                                               | Use        |
| ------------------------------------------------------- | ---------- |
| Simple CRUD or standard queries                         | JPA (JPQL) |
| Complex joins, DB functions, or millions of rows        | Native SQL |
| Need DB tuning (e.g., `index hint`, `limit`, `analyze`) | Native SQL |
| Want database independence                              | JPQL       |


