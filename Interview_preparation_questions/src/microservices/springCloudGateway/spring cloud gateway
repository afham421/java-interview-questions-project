ðŸ”° 1. What is Spring Cloud Gateway?
Explanation:
Spring Cloud Gateway is an API Gateway built on top of Spring WebFlux. It acts as a single entry point for all your backend services (microservices), and can handle routing, security, monitoring, and traffic control (like rate limiting).

Think of it like a traffic copâ€”directing incoming client requests to the right backend service, possibly transforming or filtering those requests/responses.

ðŸ”° 2. Why use Spring Cloud Gateway in Microservices Architecture?
Explanation:
In microservices, each service is independent, and clients shouldnâ€™t have to call each one directly. A Gateway helps by:

Acting as a single point of entry

Handling cross-cutting concerns like:

Authentication and Authorization

Logging

Rate limiting

Path rewriting

Load balancing

Providing routing logic to forward requests to appropriate services.

ðŸ”° 3. What is a Route in Spring Cloud Gateway?
Explanation:
A Route is a rule that defines how requests should be handled. It includes:

Predicate: condition to match the request (e.g., path is /api/users/**)

Destination URI: the backend service it should forward to

Filters: logic to apply before or after forwarding the request (e.g., modify headers, log data)

Example:

yaml
Copy
Edit
spring:
  cloud:
    gateway:
      routes:
        - id: user-service
          uri: http://localhost:8081
          predicates:
            - Path=/api/users/**
ðŸ”° 4. What are Predicates in Spring Cloud Gateway?
Explanation:
Predicates are conditions that are used to match incoming requests. Only if the predicate evaluates to true, the request is routed.

Examples:

Path=/api/**

Header=X-Request-ID, \d+

Method=GET

Host=*.mydomain.com

You can combine multiple predicates using logical AND.

ðŸ”° 5. What are Filters in Spring Cloud Gateway?
Explanation:
Filters allow you to modify the request or response. Theyâ€™re used for tasks like:

Adding headers

Logging

Changing request path

Rate limiting

Authentication

Types:

Pre-filters: Run before the request is forwarded

Post-filters: Run after the response is returned

ðŸ”° 6. What is the difference between Global and Route-specific filters?
Global filters apply to every request.

Route-specific filters apply only to a particular route.

Example of route-specific filter:

yaml
Copy
Edit
filters:
  - AddRequestHeader=X-Request-Foo, Bar
Global filters are configured via Java by implementing GlobalFilter.

ðŸ”° 7. How to define routes in Spring Cloud Gateway?
You can define routes in two ways:

a) YAML/Properties
yaml
Copy
Edit
spring:
  cloud:
    gateway:
      routes:
        - id: product-service
          uri: lb://PRODUCT-SERVICE
          predicates:
            - Path=/products/**
b) Java Configuration
java
Copy
Edit
@Bean
public RouteLocator customRoutes(RouteLocatorBuilder builder) {
    return builder.routes()
        .route("product-service", r -> r.path("/products/**")
            .uri("lb://PRODUCT-SERVICE"))
        .build();
}
ðŸ”° 8. What is the difference between Spring MVC and Spring WebFlux?
| Feature      | Spring MVC                   | Spring WebFlux                       |
| ------------ | ---------------------------- | ------------------------------------ |
| Thread model | Blocking (Servlet API)       | Non-blocking, reactive               |
| Performance  | Good for small-scale apps    | Better for high-concurrency          |
| Framework    | Based on Tomcat, Jetty, etc. | Uses Reactor, Netty                  |
| Use case     | Traditional apps             | Modern microservices, real-time apps |


Spring Cloud Gateway uses WebFlux, which is why itâ€™s non-blocking and reactive.

ðŸ”° 9. How to enable service discovery in Spring Cloud Gateway?
Answer:
Spring Cloud Gateway can automatically discover services via Eureka. Use the lb:// prefix for the uri to enable client-side load balancing.

yaml
Copy
Edit
uri: lb://USER-SERVICE
This means it will call a service named USER-SERVICE registered in Eureka.

ðŸ”° 10. What is Rate Limiting?
Explanation:
Rate Limiting restricts how many requests a client can make in a certain time.

Spring Cloud Gateway supports rate limiting using:

Redis

Filters (like RequestRateLimiter)

Example:

yaml
Copy
Edit
filters:
  - name: RequestRateLimiter
    args:
      redis-rate-limiter.replenishRate: 10
      redis-rate-limiter.burstCapacity: 20
ðŸ”° 11. How to create a custom filter?
Answer:
Implement the GatewayFilter or GlobalFilter interface:

java
Copy
Edit
@Component
public class LoggingFilter implements GlobalFilter {
    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        System.out.println("Request URI: " + exchange.getRequest().getURI());
        return chain.filter(exchange);
    }
}
ðŸ”° 12. How to implement Circuit Breaker in Gateway?
You can use Resilience4j:

yaml
Copy
Edit
filters:
  - name: CircuitBreaker
    args:
      name: myCircuitBreaker
      fallbackUri: forward:/fallback
When the service fails, Gateway routes the request to the fallback endpoint.

ðŸ”° 13. How does Gateway support load balancing?
Answer:
If you use Eureka + lb://service-name, Gateway will automatically load balance between available service instances.

This works using Spring Cloud LoadBalancer (or Ribbon if youâ€™re using older Spring Cloud).

ðŸ”° 14. How to implement JWT authentication in Spring Cloud Gateway?
You can create a custom authentication filter to validate JWT tokens in requests, extract user roles, and pass them to downstream services.

Or, use Spring Cloud Security for full OAuth2/JWT integration.

ðŸ”° 15. How to enable CORS in Spring Cloud Gateway?
Answer:
Add a CORS filter:

java
Copy
Edit
@Bean
public CorsWebFilter corsWebFilter() {
    CorsConfiguration config = new CorsConfiguration();
    config.setAllowCredentials(true);
    config.addAllowedOrigin("*");
    config.addAllowedHeader("*");
    config.addAllowedMethod("*");

    UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
    source.registerCorsConfiguration("/**", config);

    return new CorsWebFilter(source);
}
ðŸ”° 16. Scenario-based: How to log requests and responses?
Answer:
Create a GlobalFilter that logs the request and response.

java
Copy
Edit
@Component
public class LoggingFilter implements GlobalFilter {
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        System.out.println("Request: " + exchange.getRequest().getURI());
        return chain.filter(exchange)
            .then(Mono.fromRunnable(() -> {
                System.out.println("Response: " + exchange.getResponse().getStatusCode());
            }));
    }
}
