Data Encapsulation is one of the core principles of Object-Oriented Programming (OOP). It refers to the bundling of data (variables) and the methods (functions) that operate on that data into a single unit, typically a class. It also involves restricting direct access to some of the object's components, which is a means of preventing unintended interference or misuse.

ðŸ”’ Key Concept:
Encapsulation is about hiding internal details and only exposing what's necessary via controlled access (usually through getters and setters).

ðŸ’¡ Example in Java:

public class Person {
    private String name;     // private = encapsulated
    private int age;

    // Public getter and setter to access private data
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        if(age > 0) {
            this.age = age;
        }
    }
}
âœ… Benefits of Encapsulation:
Control access to data (via private/public/protected)

Improves security by hiding internal logic

Increases flexibility to change implementation without affecting other parts

Makes the code easier to maintain