‚úÖ Singleton Design Pattern in Java
The Singleton Pattern ensures that a class has only one instance and provides a global point of access to it. It's commonly used for shared resources like:

Logging

Database connections

Configuration settings

Caches



üîπ Key Concepts:
Private constructor: Prevents instantiation from outside the class.

Static variable: Holds the single instance.

Static method: Provides access to the instance.




üîß Basic Singleton Example (Lazy Initialization - Not Thread Safe)

public class Singleton {
    private static Singleton instance;

    private Singleton() {
        // private constructor
    }

    public static Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton(); // creates instance only when needed
        }
        return instance;
    }
}
‚ö†Ô∏è Not thread-safe: In multithreading, multiple instances can be created.




üîê Thread-Safe Singleton (Synchronized Method) >>>>>> means only one thread can access at a time

public class Singleton {
    private static Singleton instance;

    private Singleton() {}

    public static synchronized Singleton getInstance() {
        if (instance == null) {
            instance = new Singleton();
        }
        return instance;
    }
}
üü° Slower due to method-level synchronization.




‚ö° Best Practice: Double-Checked Locking (Thread-safe & Fast)

public class Singleton {
    private static volatile Singleton instance;

    private Singleton() {}

    public static Singleton getInstance() {
        if (instance == null) {
            synchronized (Singleton.class) {
                if (instance == null) {
                    instance = new Singleton();
                }
            }
        }
        return instance;
    }
}
‚úÖ Recommended for production-level code (efficient + thread-safe).




üßä Eager Initialization (Thread-safe but always creates instance)

public class Singleton {
    private static final Singleton instance = new Singleton();

    private Singleton() {}

    public static Singleton getInstance() {
        return instance;
    }
}
‚ö†Ô∏è Instance created even if not used ‚Äî may waste resources.





üßµ Singleton with Enum (Best Practice)

public enum Singleton {
    INSTANCE;

    public void doSomething() {
        System.out.println("Doing something...");
    }
}
‚úÖ Thread-safe, serialization-safe, and simplest way to implement singleton in Java.




‚úÖ Use Cases in Real Projects:
Runtime.getRuntime()

Logger.getLogger()

Spring Beans (by default, beans are singletons)

Database Connection Pool Manager