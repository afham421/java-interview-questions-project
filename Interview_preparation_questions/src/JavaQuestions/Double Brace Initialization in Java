‚úÖ Double Brace Initialization in Java
Double Brace Initialization is a shorthand technique used to initialize collections (like List, Set, Map) quickly and concisely in Java.

üîç Syntax Example:

List<String> list = new ArrayList<String>() {{
    add("Java");
    add("Python");
    add("C++");
}};
üí° What‚Äôs going on here?
The first brace { creates an anonymous inner class.

The second brace { is an instance initializer block, where you can call methods like add().

‚úÖ Real Use Example:

import java.util.*;

public class Example {
    public static void main(String[] args) {
        List<Integer> numbers = new ArrayList<Integer>() {{
            add(10);
            add(20);
            add(30);
        }};
        System.out.println(numbers); // [10, 20, 30]
    }
}
‚ö†Ô∏è Drawbacks (Why it's not recommended for production):
| Issue                                  | Explanation                                       |
| -------------------------------------- | ------------------------------------------------- |
| ‚ùå **Creates an anonymous inner class** | Adds an unnecessary class at runtime              |
| ‚ùå **Memory leak risk**                 | If the class holds a reference to the outer class |
| ‚ùå **Serialization issues**             | Not easy to serialize                             |
| ‚ùå **Less readable**                    | Can confuse new developers or tools               |


‚úÖ Better Alternative (Using List.of() in Java 9+):

List<String> list = List.of("Java", "Python", "C++");
Or use Arrays.asList() for older versions:

List<String> list = Arrays.asList("Java", "Python", "C++");

‚úÖ Summary:
"Double Brace Initialization is a quick way to initialize collections using an anonymous class and instance block.
It's handy but discouraged in real-world applications due to hidden performance and design issues."

