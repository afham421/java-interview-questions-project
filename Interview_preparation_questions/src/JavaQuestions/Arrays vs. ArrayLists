✅ Contiguous Memory in Arrays vs. ArrayLists
🔹 Arrays:
Arrays in Java are stored in contiguous (continuous) memory locations.

This means all elements are placed next to each other in memory.

The JVM allocates a fixed-size block of memory when you create an array.

int[] arr = new int[5]; // Allocates memory for 5 ints contiguously
🧠 Why?

Arrays are low-level, fixed-size structures.

Access is fast (arr[i]) because it uses direct indexing:
base_address + i * size_of_element      // this is the calculation to get the path and value of index  // in java we start from 0 index to less the extra calculation

//Java uses 0-based indexing because it simplifies memory calculations, comes from C/C++ tradition, and makes array and algorithm logic more efficient and intuitive.


🔹 ArrayList:
Internally, ArrayList uses an array, so it also stores elements in contiguous memory, but with abstraction.

The key difference is:

You don’t control the memory allocation.

When the internal array gets full, the ArrayList creates a new, larger array, and copies all elements to it.

The old array is discarded, and the reference is updated.

ArrayList<Integer> list = new ArrayList<>();
list.add(1); // Internally backed by an array
🔄 This resizing and copying make the internal structure non-contiguous from the developer's point of view, even though the actual internal array is contiguous.

🔍 Summary Table:
| Feature           | Array                      | ArrayList                            |
| ----------------- | -------------------------- | ------------------------------------ |
| Memory Allocation | Contiguous, fixed size     | Internally contiguous, but resizable |
| Size              | Fixed                      | Dynamic                              |
| Performance       | Faster access, no overhead | Slower resizing (copying involved)   |
| Abstraction Level | Low (direct memory)        | High (managed by JVM)                |


✅ Final Explanation:
"Arrays use contiguous memory locations for storing elements, enabling fast direct access. ArrayLists, while internally backed by arrays, abstract this from the user and resize dynamically. This resizing may involve allocating a new array and copying elements, making the memory layout appear non-contiguous to developers."

Let me know if you'd like a visual diagram to see how resizing works in ArrayList!





✅ Where are arrays stored in Java — heap or stack?
In Java, arrays are objects, so:

🟢 All arrays (regardless of type) are stored in the heap memory.

🔍 Detailed Explanation:
Example:

int[] arr = new int[5];
arr (the reference) is stored on the stack (if declared in a method).

The actual array object (containing 5 integers) is stored in the heap.

🔧 Why heap?
Because arrays are dynamically allocated objects.

The heap allows:

Variable-size allocation

Global accessibility (e.g., across methods or threads)

Garbage collection

🧠 Stack vs Heap in this context:
| Part                        | Stack                   | Heap                  |
| --------------------------- | ----------------------- | --------------------- |
| `arr` (reference)           | Local variable on stack |                       |
| `new int[5]` (actual array) |                         | Object stored in heap |


✅ Applies to:
Arrays of primitive types (int[], char[], etc.)

Arrays of objects (String[], Student[], etc.)

All are stored in the heap, even if the array holds primitive types.

🔚 Summary:
"In Java, the array itself (the actual data) is always stored in the heap because it's an object. However, the reference to that array may be stored in the stack if it's a local variable."