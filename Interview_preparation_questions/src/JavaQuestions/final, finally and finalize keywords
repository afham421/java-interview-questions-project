Great question! The keywords final, finally, and finalize look similar, but they have completely different purposes in Java.

‚úÖ 1. final ‚Äî Used to restrict
It's a modifier.

Used with variables, methods, and classes.

| Use with         | Meaning                                 |
| ---------------- | --------------------------------------- |
| `final` variable | Value cannot be changed after assigned. |
| `final` method   | Method cannot be overridden.            |
| `final` class    | Class cannot be extended (inherited).   |



final int x = 10;
// x = 20;  ‚ùå Not allowed




‚úÖ 2. finally ‚Äî Used with try-catch
It's a block.

Used to execute code no matter what (whether exception occurs or not).

Often used to close resources like files, DB connections, etc.


try {
    int a = 5 / 0;
} catch (Exception e) {
    System.out.println("Exception caught");
} finally {
    System.out.println("This will always run");
}



‚úÖ 3. finalize() ‚Äî Used for garbage collection
It's a method.

Called by the Garbage Collector before destroying an object.

Rarely used now (and deprecated in recent Java versions).


protected void finalize() {
    System.out.println("Object is being destroyed");
}
‚ö†Ô∏è Not recommended to use finalize() anymore ‚Äî better to use try-with-resources or cleaner alternatives.



üß† Summary Table:
| Keyword      | Type     | Purpose                                   |
| ------------ | -------- | ----------------------------------------- |
| `final`      | Modifier | Prevent change/inheritance                |
| `finally`    | Block    | Always executes after try-catch           |
| `finalize()` | Method   | Called before object is garbage collected |
